{"version":3,"sources":["components/style/Styled.styles.js","components/SquareCom.js","style/Style.styles.js","App.js","index.js"],"names":["Td","styled","td","Div","div","SquareCom","useState","turn","setTurn","Array","fill","cells","setCells","winner","setWinner","handleClick","num","squares","combos","across","down","diagnol","combo","forEach","pattern","checkforWinner","alert","Cell","onClick","Header_Text","p","App","ReactDOM","render","document","querySelector"],"mappings":"6KAEaA,EAAKC,IAAOC,GAAV,+GAOFC,EAAMF,IAAOG,IAAV,0E,OC8FDC,EApGG,WAAO,IAAD,EACIC,mBAAS,KADb,mBACdC,EADc,KACRC,EADQ,OAEMF,mBAASG,MAAM,GAAGC,KAAK,KAF7B,mBAEdC,EAFc,KAEPC,EAFO,OAGQN,qBAHR,mBAGdO,EAHc,KAGNC,EAHM,KAwChBC,EAAc,SAACC,GACnB,GAAkB,KAAfL,EAAMK,GAAT,CAIA,IAAIC,EAAO,YAAON,GAEN,MAATJ,GACDU,EAAQD,GAAO,IACfR,EAAQ,OAERS,EAAQD,GAAO,IACfR,EAAQ,MA/CW,SAACS,GACtB,IAAIC,EAAS,CACXC,OAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAETC,KAAM,CACJ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAETC,QAAS,CACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGX,IAAI,IAAIC,KAASJ,EACfA,EAAOI,GAAOC,SAAQ,SAACC,GAEK,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KAIhBP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KACxCP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KAExCV,EAAUG,EAAQO,EAAQ,QAoBhCC,CAAeR,GACfL,EAASK,QAbPS,MAAM,oBAuBJC,EAAO,SAAC,GAAY,IAAVX,EAAS,EAATA,IACd,OAAO,cAAChB,EAAD,CAAI4B,QAAS,kBAAMb,EAAYC,IAA/B,SAAsCL,EAAMK,MAErD,OACE,cAACb,EAAD,UACE,2CACSI,EACP,kCACE,+BACE,cAACoB,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,OAEb,+BACE,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,OAEb,+BACE,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,UAGdH,GACC,gCACC,8BAAIA,EAAJ,qBACA,wBAAQe,QAAS,kBAjCxBd,EAAU,WACVF,EAASH,MAAM,GAAGC,KAAK,MAgChB,iCC7FEmB,EAAc5B,IAAO6B,EAAV,mDCWTC,EATH,WACV,OACE,gCACE,cAACF,EAAD,gCACA,cAAC,EAAD,QCJNG,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,cAAc,Y","file":"static/js/main.d52f0e87.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Td = styled.td`\r\n  border: 1px solid grey;\r\n  width: 5rem;\r\n  height: 5rem;\r\n  text-align: center;\r\n`\r\n\r\nexport const Div = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Td, Div } from './style/Styled.styles'\r\n\r\nconst SquareCom = () => {\r\n  const [ turn, setTurn ] = useState('X');\r\n  const [ cells, setCells ] = useState(Array(9).fill(''));\r\n  const [ winner, setWinner ] = useState();\r\n\r\n  const checkforWinner = (squares) => {\r\n    let combos = {\r\n      across: [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8]\r\n      ],\r\n      down: [\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8]\r\n      ], \r\n      diagnol: [\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n      ]\r\n    }\r\n    for(let combo in combos){\r\n      combos[combo].forEach((pattern) =>{\r\n        if(\r\n          squares[pattern[0]] === '' ||\r\n          squares[pattern[1]] === '' ||\r\n          squares[pattern[2]] === '' \r\n        ){\r\n          // do nothing\r\n        }else if(\r\n          squares[pattern[0]] === squares[pattern[1]] &&\r\n          squares[pattern[1]] === squares[pattern[2]]\r\n        ){\r\n          setWinner(squares[pattern[0]])\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleClick = (num) => {\r\n    if(cells[num] !== ''){\r\n      alert('already clicked')\r\n      return\r\n    }\r\n    let squares = [...cells]\r\n\r\n    if(turn === 'X'){\r\n      squares[num] = 'X'\r\n      setTurn('O')\r\n    }else{\r\n      squares[num] = 'O'\r\n      setTurn('X')\r\n    }\r\n    checkforWinner(squares)\r\n    setCells(squares)\r\n  }\r\n\r\n  const handleRestart = () => {\r\n    setWinner(null);\r\n    setCells(Array(9).fill(''))\r\n  }\r\n\r\n\r\n\r\n  const Cell = ({ num }) =>{\r\n    return <Td onClick={() => handleClick(num)}>{cells[num]}</Td>\r\n  }\r\n  return (\r\n    <Div>\r\n      <table>\r\n        Turn: {turn}\r\n        <tbody>\r\n          <tr>\r\n            <Cell num={0} />\r\n            <Cell num={1} />\r\n            <Cell num={2} />\r\n          </tr>\r\n          <tr>\r\n            <Cell num={3} />\r\n            <Cell num={4} />\r\n            <Cell num={5} />\r\n          </tr>\r\n          <tr>\r\n            <Cell num={6} />\r\n            <Cell num={7} />\r\n            <Cell num={8} />\r\n          </tr>\r\n        </tbody>\r\n        {winner && (\r\n          <div>\r\n           <p>{winner} is the winner!</p>\r\n           <button onClick={() => handleRestart()}>Play Again</button>\r\n          </div>\r\n        )}\r\n      </table>\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport default SquareCom;","import styled from 'styled-components'\r\n\r\nexport const Header_Text = styled.p`\r\n  text-align: center;\r\n`","import React from 'react'\r\nimport SquareCom from './components/SquareCom'\r\nimport { Header_Text } from './style/Style.styles'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Header_Text>React Tic-Tac-Toe</Header_Text>\r\n      <SquareCom />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>,document.querySelector('#root'))"],"sourceRoot":""}